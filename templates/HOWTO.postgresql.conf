# {{ ansible_managed }}
How to add a new PostgreSQL version
===================================

Note:  (https://www.postgresql.org/support/versioning)

Beginning with version 10, a major release is indicated by increasing the first part of the version, 
e.g. 10 to 11. Before version 10, a major release was indicated by increasing either the first or second 
part of the version number, e.g. 9.5 to 9.6. 

Do the following steps: ( versions mentioned for transitioninng from version 9.6 to 10 )

1) Download the Debian package 'postgresql-<major_version>_[...].deb' from
http://apt.postgresql.org/pub/repos/apt/pool/main/p/postgresql-<major_version>, e.g. for new version 10 from
http://apt.postgresql.org/pub/repos/apt/pool/main/p/postgresql-10

2) Extract the 'usr/share/postgresql/<major-version>/postgresql.conf.sample' file with
   dpkg-deb -x postgresql-<major_version>_[...].deb dir/to/extract/to/

   and save it under the 'templates' role directory
    => templates/postgresql.conf.<major_version>.orig

3) Check the difference between another version, e.g. for 9.6 -> 10:
    => vimdiff postgresql.conf.10.orig postgresql.conf.9.6.orig

4) Copy an existing template, e.g.:
    => cp postgresql.conf.9.6.j2 postgresql.conf.10.j2

5) Update the new template following the major differences.

6) If there are new options or some of them removed, update the 'default/main.yml' file and add a "(>= 10)" or "(<= 10)" comment to them.

7) For yum based installation add version and minor version of postgresql in 'default/main.yml' under '# YUM settings' at end of file

8) Update the '.travis.yml' file to test its new version.
