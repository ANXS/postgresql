# file: postgresql/tasks/databases-docker.yml

- name: PostgreSQL | Make sure the PostgreSQL databases are present
  postgresql_db:
    name: "{{item.name}}"
    owner: "{{ item.owner | default(postgresql_database_owner) }}"
    encoding: "{{ item.encoding | default(postgresql_encoding) }}"
    lc_collate: "{{ item.lc_collate | default(postgresql_locale) }}"
    lc_ctype: "{{ item.lc_ctype | default(postgresql_ctype) }}"
    port: "{{postgresql_port}}"
    template: "template0"
    state: present
    login_user: "{{postgresql_admin_user}}"
    login_password: "{{postgresql_admin_pwd}}"
    login_host: "{{postgresql_login_host}}"
  with_items: "{{postgresql_databases}}"
  when: postgresql_databases|length > 0

- name: PostgreSQL | Add extensions to the databases
  shell: "psql {{item.0.db}} --username {{postgresql_admin_user}} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS {{ item.1 }};'"
  become: yes
  with_subelements:
    - "{{postgresql_database_extensions}}"
    - extensions
  register: result
  changed_when: "'NOTICE' not in result.stderr"
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | Add hstore to the databases with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{postgresql_admin_user}} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS hstore;'"
  with_items: "{{postgresql_databases}}"
  register: hstore_ext_result
  failed_when: hstore_ext_result.rc != 0 and ("already exists, skipping" not in hstore_ext_result.stderr)
  changed_when: hstore_ext_result.rc == 0 and ("already exists, skipping" not in hstore_ext_result.stderr)
  when: item.hstore is defined and item.hstore
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | Add uuid-ossp to the database with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{postgresql_admin_user}} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";'"
  with_items: "{{postgresql_databases}}"
  register: uuid_ext_result
  failed_when: uuid_ext_result.rc != 0 and ("already exists, skipping" not in uuid_ext_result.stderr)
  changed_when: uuid_ext_result.rc == 0 and ("already exists, skipping" not in uuid_ext_result.stderr)
  when: item.uuid_ossp is defined and item.uuid_ossp
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | Add postgis to the databases with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{postgresql_admin_user}} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'&&psql {{item.name}} --username {{postgresql_admin_user}} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS postgis_topology;'"
  with_items: "{{postgresql_databases}}"
  when: item.gis is defined and item.gis
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | add cube to the database with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{ postgresql_admin_user }} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'create extension if not exists cube;'"
  with_items: "{{postgresql_databases}}"
  when: item.cube is defined and item.cube
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | Add plpgsql to the database with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{ postgresql_admin_user }} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS plpgsql;'"
  with_items: "{{postgresql_databases}}"
  when: item.plpgsql is defined and item.plpgsql
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | add earthdistance to the database with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{ postgresql_admin_user }} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'create extension if not exists earthdistance;'"
  with_items: "{{postgresql_databases}}"
  when: item.earthdistance is defined and item.earthdistance
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"

- name: PostgreSQL | Add citext to the database with the requirement
  become: yes
  shell: "{{ postgresql_bin_directory}}/psql {{item.name}} --username {{postgresql_admin_user}} --host {{postgresql_login_host}} --port {{postgresql_port}} -c 'CREATE EXTENSION IF NOT EXISTS citext;'"
  with_items: "{{postgresql_databases}}"
  register: citext_ext_result
  failed_when: citext_ext_result.rc != 0 and ("already exists, skipping" not in citext_ext_result.stderr)
  changed_when: citext_ext_result.rc == 0 and ("already exists, skipping" not in citext_ext_result.stderr)
  when: item.citext is defined and item.citext
  environment:
    PGPASSWORD: "{{postgresql_admin_pwd}}"
